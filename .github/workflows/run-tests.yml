name: Scipy tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # daily scheduled build at 4am
  schedule:
      - cron: "0 4 * * *"

jobs:
  build-wasm-emscripten:
    runs-on: ubuntu-latest
    env:
      PYODIDE_VERSION: '0.22.0'
      PYODIDE_JS_VERSION: '0.22.0'
      PYTHON_VERSION: '3.10.7'
      NODE_VERSION: 18
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: clone pyodide repo
        shell: bash -l {0}
        run: |
          git clone https://github.com/pyodide/pyodide --depth 1
          cd pyodide
          git log -1
          pip install -e ./pyodide-build

      - name: Download latest Pyodide debug build
        uses: actions/github-script@v6
        with:
          script: |
            var fs = require("fs");
            const owner = "lesteve";
            const repo = "scipy-tests-pyodide";

            const artifacts_response = await github.rest.actions.listArtifactsForRepo({owner: owner, repo: repo});
            console.log(`Found ${artifacts_response.data.total_count} artifacts`);
            artifacts = artifacts_response.data.artifacts;

            const most_recent_artifact = artifacts[0];
            
            const response = await github.rest.actions.downloadArtifact({
                owner: owner, repo: repo, artifact_id: most_recent_artifact.id, archive_format: "zip"});
            console.log(`Downloaded ${response.data.byteLength / 1000000} MB`);

            await fs.appendFile("pyodide-build.zip", Buffer.from(response.data), function (err) {
                if (err) throw err;
            });

      - name: Unzip Pyodide debug build artifact
        run: |
          unzip pyodide-build.zip -d pyodide
          ls -ltrh pyodide/dist
          # Put back lost permission in artifact
          chmod u+x pyodide/dist/python

      - name: set up node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: install Pyodide
        run: |
          npm install "pyodide@$PYODIDE_JS_VERSION"

      - name: install debug build
        run: |
          cp -r pyodide/dist/* node_modules/pyodide

      - name: Test
        run: |
          python run-tests-by-module.py
